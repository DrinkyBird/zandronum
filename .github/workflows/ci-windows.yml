name: CI build

on: [push, pull_request]

env:
  FMOD_VER: 44464
  FMOD_SOVER: 4.44.64

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [windows-latest]
        build_type: [Release]
        platform: ["Win32", "x64"]
        include:
          - os: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies for Windows
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest -Outfile 'deps.zip' 'https://github.com/DrinkyBird/zan-ci-deps/releases/download/ci-dependencies/zan-windows-deps.zip'
        Expand-Archive 'deps.zip' -DestinationPath 'deps'
        echo "DXSDK_DIR=${PWD}/deps/dxsdk" >> $env:GITHUB_ENV
        echo "OPUS_INCLUDE_DIR=${PWD}/deps/opus/include" >> $env:GITHUB_ENV
        echo "FMOD_INCLUDE_DIR=${PWD}/deps/fmodapi44464win/api/inc" >> $env:GITHUB_ENV
        echo "NASM_PATH=${PWD}/deps/nasm/nasm.exe" >> $env:GITHUB_ENV
        If ( '{{ matrix.platform }}' -eq 'x64' ) {
            echo "OPUS_LIBRARY=${PWD}/deps/opus/lib64/opus.lib" >> $env:GITHUB_ENV
            echo "FMOD_LIBRARY=${PWD}/deps/fmodapi44464win/api/lib/fmodex64_vc.lib" >> $env:GITHUB_ENV
            echo "OPENSSL_ROOT_DIR=${PWD}/deps/openssl64" >> $env:GITHUB_ENV
        }
        Else {
            echo "OPUS_LIBRARY=${PWD}/deps/opus/lib32/opus.lib" >> $env:GITHUB_ENV
            echo "FMOD_LIBRARY=${PWD}/deps/fmodapi44464win/api/lib/fmodex_vc.lib" >> $env:GITHUB_ENV
            echo "OPENSSL_ROOT_DIR=${PWD}/deps/openssl32" >> $env:GITHUB_ENV
        }

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -A {{ matrix.platform }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Create package
      shell: bash
      run: |
        mkdir package
        if [[ "${{ runner.os }}" == 'Linux' ]]; then
          cp ${{ steps.strings.outputs.build-output-dir }}/zandronum* package
          cp ${{ steps.strings.outputs.build-output-dir }}/*.pk3 package
          cp ${{ steps.strings.outputs.build-output-dir }}/*.so package || true
          cp ${FMOD_LIBRARY} package || true
        fi

    - name: Upload artefacts
      uses: actions/upload-artifact@v4
      with:
        path: package
        name: ${{ matrix.os }} ${{ matrix.build_type }} ${{ matrix.serveronly }}
