# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on: [push, pull_request]

env:
  FMOD_VER: 42416

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest]
        build_type: [Release]
        serveronly: ["OFF", "ON"]
        include:
          - os: windows-latest
          - os: ubuntu-latest
          - os: ubuntu-24.04-arm
        exclude:
          - os: windows-latest
            serveronly: "ON"
          - os: ubuntu-24.04-arm
            serveronly: "OFF"

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies for Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install g++ make cmake libsdl1.2-dev mercurial zlib1g-dev libbz2-dev libjpeg-dev libfluidsynth-dev libgtk2.0-dev timidity nasm libgl1-mesa-dev libssl-dev tar libglew-dev wget libopus-dev

    - name: Download FMOD Ex Programmer's API
      shell: bash
      if: ${{ matrix.serveronly }} == 'OFF'
      run: |
        wget https://github.com/DrinkyBird/zan-ci-deps/releases/download/ci-dependencies/fmodapi42416linux64.tar.gz
        tar xf fmodapi${FMOD_VER}linux64.tar.gz
        echo "FMOD_INCLUDE_DIR=${PWD}/fmodapi${FMOD_VER}linux/api/inc" >> $GITHUB_ENV
        echo "FMOD_LIBRARY=${PWD}/fmodapi${FMOD_VER}linux/api/lib/libfmodex64-4.44.64.so" >> $GITHUB_ENV

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DSERVERONLY=${{ matrix.serveronly }} -DRELEASE_WITH_DEBUG_FILE=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Create Package
      shell: bash
      run: |
        mkdir package
        if [[ "${{ runner.os }}" == 'Linux' ]]; then
          cp ${{ steps.strings.outputs.build-output-dir }}/zandronum* package
          cp ${{ steps.strings.outputs.build-output-dir }}/*.pk3 package
          cp ${{ steps.strings.outputs.build-output-dir }}/*.so package || true
          cp ${FMOD_LIBRARY} package || true
        fi

    - name: Upload artefacts
      uses: actions/upload-artifact@v4
      with:
        path: package
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}
